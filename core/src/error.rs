use std::path::PathBuf;
use thiserror::Error;

/// Error lexing a source file.
#[derive(Debug, Error, PartialEq, Clone, Default)]
#[doc(hidden)]
pub enum LexError {
    /// Generic lex error.
    #[default]
    #[error("parser lex error")]
    Other,
}

/// Errors generated by the library.
#[derive(Debug, Error)]
pub enum Error {
    /// Bad arguments.
    #[error("Bad command arguments: '{0}'")]
    BadArguments(String),

    /// Include file not found.
    #[error("include file '{0}' not found ({1})")]
    Include(String, PathBuf),

    /// Unknown instruction.
    #[error("unknown instruction '{0}'")]
    UnknownInstruction(String),

    /// Invalid control code.
    #[error("invalid control code '{0}'")]
    InvalidControlCode(String),

    /// Script pragma must be first instruction.
    #[error("pragma declaration ($!) must be the first instruction")]
    PragmaFirst,

    /// Error generated by the io module.
    #[error(transparent)]
    Io(#[from] std::io::Error),

    /// Error generated parsing to an integer.
    #[error(transparent)]
    ParseInt(#[from] std::num::ParseIntError),

    /// Error generated by the pseudo-terminal library.
    #[error(transparent)]
    Expect(#[from] expectrl::Error),

    /// Error during lexing.
    #[error(transparent)]
    Lex(#[from] LexError),
}
